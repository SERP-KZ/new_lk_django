LK_Django
    Первый урок
        python -m pip install --upgrade pip
        python -m pip install django
        django-admin startproject LK
        cd LK
                (pip install psycopg2 /
                 lk/settings.py       DATABASES = {
                                            'default': {
                                                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                                                'NAME': 'lk_django',
                                                'USER': 'postgres',
                                                'PASSWORD': 'Qwerty-!',
                                                'HOST': '127.0.0.1',
                                                'PORT': '5432',
                                            }
                                        })
        pip freeze > requirements.txt
        в корне проекта создаем файл .gitignore
        manage.py migrate
        manage.py createsuperuser


    Второй урок
        manage.py startapp users
            -settings.py-
                    AUTH_USER_MODEL = 'users.CustomUser'
                    INSTALLED_APPS  ->   'users.apps.UsersConfig',
            -users/models-
                    import uuid
                    from django.db import models
                    from django.contrib.auth.models import AbstractUser


                    class CustomUser(AbstractUser):
                        COMPANY = 'COMPANY'
                        PRIVATE_PERSON = 'PRIVATE'
                        COMPANY_PRIVATE = [
                            (COMPANY, 'Компания'),
                            (PRIVATE_PERSON, 'Частное лицо')
                        ]

                        id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
                        full_name = models.CharField(verbose_name='Наименование полное', max_length=250, unique=True, null=True, blank=True)
                        status = models.CharField(verbose_name='Юр\Физ лицо', max_length=50, choices=COMPANY_PRIVATE, default=COMPANY)

            -users/forms.py-
                        from django.contrib.auth.forms import UserCreationForm, UserChangeForm
                        from .models import CustomUser


                        class CustomUserCreationForm(UserCreationForm):

                            class Meta(UserCreationForm.Meta):
                                model =CustomUser
                                fields = UserCreationForm.Meta.fields + ('full_name', 'status',)


                        class CustomUserChangeForm(UserChangeForm):

                            class Meta(UserChangeForm.Meta):
                                model =CustomUser
                                fields = UserCreationForm.Meta.fields + ('full_name', 'status',)

            -users/admin-
                        from django.contrib import admin
                        from django.contrib.auth.admin import UserAdmin
                        from .forms import CustomUserCreationForm, CustomUserChangeForm
                        from .models import CustomUser


                        class CustomUserAdmin(UserAdmin):
                            add_form = CustomUserCreationForm
                            form = CustomUserChangeForm
                            model = CustomUser
                            list_display = ['username', 'full_name', 'status']

                            fieldsets = UserAdmin.fieldsets + (
                                ('Реквизиты 1С', {'fields': ('full_name', 'status',)}),
                            )

                            add_fieldsets = UserAdmin.add_fieldsets + (
                                ('Реквизиты 1С', {'fields': ('full_name', 'status',)}),
                            )

                            search_fields = ('full_name', 'username',)
                            ordering = ('full_name', 'username',)
                            list_filter = ('status',)


                        admin.site.register(CustomUser, CustomUserAdmin)

        manage.py makemigrations users
        удаляем полностью БД / если постгри создаем заново с тем же названием пустую
        manage.py migrate
        manage.py createsuperuser

    Третий урок
        pip install djangorestframework
        INSTALLED_APPS -> 'rest_framework',
        pip freeze > requirements.txt
            -users\serializers.py-
                        import uuid
                        from .models import CustomUser
                        from rest_framework import serializers


                        class CustomUserSerializer(serializers.ModelSerializer):
                            id = serializers.UUIDField(default=uuid.uuid4)
                            password = serializers.CharField(write_only=True)

                            class Meta:
                                model = CustomUser
                                fields = ['id', 'username', 'full_name', 'status', 'password']

                            def create(self, validated_data):
                                user = super().create(validated_data)
                                user.set_password(validated_data['password'])
                                user.save()
                                return user

                            def update(self, instance, validated_data):
                                user = super().update(instance, validated_data)
                                try:
                                    user.set_password(validated_data['password'])
                                    user.save()
                                except KeyError:
                                    pass
                                return user
            -users/view.py-
                        from rest_framework import viewsets, permissions
                        from .serializers import CustomUserSerializer
                        from .models import CustomUser


                        class CustomUserViewSet(viewsets.ModelViewSet):
                            queryset = CustomUser.objects.all()
                            serializer_class = CustomUserSerializer
                            permission_classes = [permissions.IsAdminUser]
            -users/urls.py-
                        from django.urls import path, include
                        from .views import *
                        from rest_framework import routers

                        router = routers.DefaultRouter()
                        router.register(r'api/v1/users', CustomUserViewSet)

                        urlpatterns = [
                            path('', include(router.urls)),
                        ]
            -LK/urls-
                        from django.contrib import admin
                        from django.urls import path, include

                        urlpatterns = [
                            path('admin/', admin.site.urls),
                            path('', include('users.urls')),
                        ]
            settings.py
                   INSTALLED_APPS -> 'rest_framework.authtoken',
                   REST_FRAMEWORK = {
                        'DEFAULT_AUTHENTICATION_CLASSES': [
                            'rest_framework.authentication.TokenAuthentication',
                            'rest_framework.authentication.BasicAuthentication',
                            'rest_framework.authentication.SessionAuthentication',
                        ]
                    }
        manage.py migrate
        pip install django-cors-headers
             -settings.py-
                   INSTALLED_APPS -> 'corsheaders', // перед 'rest_framework',
                   MIDDLEWARE -> 'corsheaders.middleware.CorsMiddleware', // после  'django.contrib.sessions.middleware.SessionMiddleware',
                   CORS_ALLOWED_ORIGINS = [
                        "http://127.0.0.1",
                    ]
        pip freeze > requirements.txt


    Четвертый урок
       pip install djangorestframework-simplejwt
       pip freeze > requirements.txt
       setings.py ->
               REST_FRAMEWORK = {
                    'DEFAULT_AUTHENTICATION_CLASSES': [
                        'rest_framework.authentication.TokenAuthentication',
                        'rest_framework.authentication.BasicAuthentication',
                        'rest_framework.authentication.SessionAuthentication',
                        'rest_framework_simplejwt.authentication.JWTAuthentication',
                    ]
               }
       lk/urls.py ->
                from django.contrib import admin
                from django.urls import path, include
                from rest_framework_simplejwt.views import (TokenObtainPairView, TokenRefreshView,)

                urlpatterns = [
                    path('admin/', admin.site.urls),
                    path('', include('users.urls')),
                    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
                    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
                ]
       settings.py ->
                INSTALLED_APPS -> 'rest_framework_simplejwt',

       users/serializers.py
                import uuid
                from rest_framework import serializers
                from django.contrib.auth import get_user_model


                class CustomUserSerializer(serializers.ModelSerializer):
                    id = serializers.UUIDField(default=uuid.uuid4)
                    password = serializers.CharField(write_only=True)

                    class Meta:
                        model = get_user_model()
                        fields = ['id', 'username', 'full_name', 'status', 'password']

                    def create(self, validated_data):
                        user = super().create(validated_data)
                        user.set_password(validated_data['password'])
                        user.save()
                        return user

                    def update(self, instance, validated_data):
                        user = super().update(instance, validated_data)
                        try:
                            user.set_password(validated_data['password'])
                            user.save()
                        except KeyError:
                            pass
                        return user


                class ProfileCustomUserSerializer(serializers.ModelSerializer):

                    class Meta:
                            model = get_user_model()
                            fields = ['username', 'full_name', 'status']




       users/view.py
                from rest_framework import viewsets, permissions, exceptions
                from .serializers import CustomUserSerializer, ProfileCustomUserSerializer
                from django.contrib.auth import get_user_model


                class CustomUserViewSet(viewsets.ModelViewSet):
                    queryset = get_user_model().objects.all()
                    serializer_class = CustomUserSerializer
                    permission_classes = [permissions.IsAdminUser]


                class ProfileCustomUserViewSet(viewsets.ReadOnlyModelViewSet):
                    serializer_class = ProfileCustomUserSerializer
                    permission_classes = [permissions.IsAuthenticated]

                    def get_queryset(self):
                        if self.request.user:
                            user = get_user_model().objects.filter(pk=self.request.user.pk)
                            if user is None:
                                raise exceptions.AuthenticationFailed('Пользователь не найден')
                            return user

       user/urls
                from django.urls import path, include
                from .views import *
                from rest_framework import routers

                router = routers.DefaultRouter()
                router.register(r'api/v1/users', CustomUserViewSet, basename='users')
                router.register(r'api/v1/user', ProfileCustomUserViewSet, basename='user')

                urlpatterns = [
                    path('', include(router.urls)),
                ]
       setings.py ->
                from datetime import timedelta

                SIMPLE_JWT = {
                    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
                    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
                }
    Пятый урок
       setings.py ->
                INSTALLED_APPS -> 'rest_framework_simplejwt.token_blacklist',
       python manage.py migrate
       users/view
                from rest_framework import viewsets, permissions, exceptions, status
                from .serializers import CustomUserSerializer, ProfileCustomUserSerializer
                from django.contrib.auth import get_user_model
                from rest_framework.views import APIView
                from rest_framework_simplejwt.tokens import RefreshToken
                from rest_framework.response import Response


                class CustomUserViewSet(viewsets.ModelViewSet):
                    queryset = get_user_model().objects.all()
                    serializer_class = CustomUserSerializer
                    permission_classes = [permissions.IsAdminUser]


                class ProfileCustomUserViewSet(viewsets.ReadOnlyModelViewSet):
                    serializer_class = ProfileCustomUserSerializer
                    permission_classes = [permissions.IsAuthenticated]

                    def get_queryset(self):
                        if self.request.user:
                            user = get_user_model().objects.filter(pk=self.request.user.pk)
                            if user is None:
                                raise exceptions.AuthenticationFailed('Пользователь не найден')
                            return user

                class LogoutView(APIView):
                    permission_classes = (permissions.IsAuthenticated,)

                    def post(self, request):
                        try:
                            refresh_token = request.data['refresh_token']
                            token = RefreshToken(refresh_token)
                            token.blacklist()

                            return Response(status=status.HTTP_200_OK)
                        except Exception as e:
                            return Response(status=status.HTTP_400_BAD_REQUEST)


       user/urls
                from django.urls import path, include
                from .views import *
                from rest_framework import routers

                router = routers.DefaultRouter()
                router.register(r'api/v1/users', CustomUserViewSet, basename='users')
                router.register(r'api/v1/user', ProfileCustomUserViewSet, basename='user')

                urlpatterns = [
                    path('', include(router.urls)),
                    path('api/v1/user_logout/', LogoutView.as_view(), name='user_logout'),
                ]

       settings ->
                SIMPLE_JWT = {
                    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
                    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
                    'ROTATE_REFRESH_TOKENS': True,
                    'BLACKLIST_AFTER_ROTATION': True,
                    'UPDATE_LAST_LOGIN': False,
                }

                CORS_ALLOWED_ORIGINS = [
                    "http://127.0.0.1",
                    "http://localhost:3000",
                ]

       users/view
                from rest_framework import viewsets, permissions, exceptions, status
                from .serializers import CustomUserSerializer, ProfileCustomUserSerializer
                from django.contrib.auth import get_user_model
                from rest_framework.views import APIView
                from rest_framework_simplejwt.tokens import RefreshToken
                from rest_framework.response import Response


                class CustomUserViewSet(viewsets.ModelViewSet):
                    queryset = get_user_model().objects.all()
                    serializer_class = CustomUserSerializer
                    permission_classes = [permissions.IsAdminUser]


                class ProfileCustomUserViewSet(viewsets.ReadOnlyModelViewSet):
                    queryset = get_user_model().objects.all()
                    serializer_class = ProfileCustomUserSerializer
                    permission_classes = [permissions.IsAuthenticated]

                    def list(self, request, *args, **kwargs):
                        profile = self.get_queryset().get(pk=self.request.user.pk)
                        serializer = self.get_serializer(profile)
                        return Response({'user':serializer.data})


                class LogoutView(APIView):
                    permission_classes = (permissions.IsAuthenticated,)

                    def post(self, request):
                        try:
                            refresh_token = request.data['refresh']
                            token = RefreshToken(refresh_token)
                            token.blacklist()

                            return Response(status=status.HTTP_200_OK)
                        except Exception as e:
                            return Response(status=status.HTTP_400_BAD_REQUEST)





